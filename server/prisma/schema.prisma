// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String // Store hashed password  
  firstName    String?
  lastName     String?
  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Float         @default(0.00)
  currency     String        @default("USD")
  isActive     Boolean       @default(true)
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  OTHER
}

model Category {
  id           String        @id @default(uuid())
  name         String
  icon         String?
  type         CategoryType
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, name, type])
  @@index([userId])
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Transaction {
  id          String          @id @default(uuid())
  amount      Float
  description String?
  date        DateTime
  type        TransactionType
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  accountId   String
  account     Account         @relation(fields: [accountId], references: [id])
  categoryId  String?
  category    Category?       @relation(fields: [categoryId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
  @@index([type])
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model Budget {
  id         String   @id @default(uuid())
  amount     Float
  startDate  DateTime
  endDate    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, categoryId, startDate, endDate])
  @@index([userId])
  @@index([categoryId])
  @@index([startDate, endDate])
}
